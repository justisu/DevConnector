{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL } from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n// Register User\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (error) {\n    const errors = error.response.data.errors;\n    if (errors) {\n      errors.forEach(err => dispatch(setAlert(err.msg, 'danger')));\n    }\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\n\n// Login User\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  console.log(\"body\", body);\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  } catch (error) {\n    const errors = error.response.data.errors;\n    if (errors) {\n      errors.forEach(err => dispatch(setAlert(err.msg, 'danger')));\n    }\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};","map":{"version":3,"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","error","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","err","msg","login","console","log"],"sources":["/Users/sudhin.justin/source/Projects/devconnector/client/src/actions/auth.js"],"sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  if(localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    })\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    })\n  }\n}\n\n// Register User\nexport const register = ({ name, email, password }) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }\n\n  const body = JSON.stringify({ name, email, password });\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    \n  } catch (error) {\n    const errors = error.response.data.errors;\n    if(errors) {\n      errors.forEach(err => dispatch(setAlert(err.msg, 'danger')))\n    }\n    dispatch({\n      type: REGISTER_FAIL,\n    });    \n  }\n}\n\n// Login User\nexport const login = (email , password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }\n\n  const body = JSON.stringify({ email, password });\n  console.log(\"body\", body);\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    \n  } catch (error) {\n    const errors = error.response.data.errors;\n    if(errors) {\n      errors.forEach(err => dispatch(setAlert(err.msg, 'danger')))\n    }\n    dispatch({\n      type: LOGIN_FAIL,\n    });    \n  }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,SAAS;AAClC,SACEC,gBAAgB,EAChBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,aAAa,EACbC,UAAU,QACL,SAAS;AAChB,OAAOC,YAAY,MAAM,uBAAuB;;AAEhD;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM,MAAMC,QAAQ,IAAI;EAC9C,IAAGC,YAAY,CAACC,KAAK,EAAE;IACrBJ,YAAY,CAACG,YAAY,CAACC,KAAK,CAAC;EAClC;EAEA,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,WAAW,CAAC;IAExCJ,QAAQ,CAAC;MACPK,IAAI,EAAEX,WAAW;MACjBY,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdR,QAAQ,CAAC;MACPK,IAAI,EAAEV;IACR,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMc,QAAQ,GAAGA,CAAC;EAAEC,IAAI;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK,MAAMZ,QAAQ,IAAI;EACvE,MAAMa,MAAM,GAAG;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;EAED,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;IAAEP,IAAI;IAAEC,KAAK;IAAEC;EAAS,CAAC,CAAC;EACtD,IAAI;IACF,MAAMT,GAAG,GAAG,MAAMb,KAAK,CAAC4B,IAAI,CAAC,YAAY,EAAEH,IAAI,EAAEF,MAAM,CAAC;IACxDb,QAAQ,CAAC;MACPK,IAAI,EAAEb,gBAAgB;MACtBc,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMW,MAAM,GAAGX,KAAK,CAACY,QAAQ,CAACb,IAAI,CAACY,MAAM;IACzC,IAAGA,MAAM,EAAE;MACTA,MAAM,CAACE,OAAO,CAACC,GAAG,IAAItB,QAAQ,CAACT,QAAQ,CAAC+B,GAAG,CAACC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC9D;IACAvB,QAAQ,CAAC;MACPK,IAAI,EAAEZ;IACR,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAM+B,KAAK,GAAGA,CAACb,KAAK,EAAGC,QAAQ,KAAK,MAAMZ,QAAQ,IAAI;EAC3D,MAAMa,MAAM,GAAG;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;EAED,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;IAAEN,KAAK;IAAEC;EAAS,CAAC,CAAC;EAChDa,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEX,IAAI,CAAC;EACzB,IAAI;IACF,MAAMZ,GAAG,GAAG,MAAMb,KAAK,CAAC4B,IAAI,CAAC,WAAW,EAAEH,IAAI,EAAEF,MAAM,CAAC;IACvDb,QAAQ,CAAC;MACPK,IAAI,EAAET,aAAa;MACnBU,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMW,MAAM,GAAGX,KAAK,CAACY,QAAQ,CAACb,IAAI,CAACY,MAAM;IACzC,IAAGA,MAAM,EAAE;MACTA,MAAM,CAACE,OAAO,CAACC,GAAG,IAAItB,QAAQ,CAACT,QAAQ,CAAC+B,GAAG,CAACC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC9D;IACAvB,QAAQ,CAAC;MACPK,IAAI,EAAER;IACR,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}