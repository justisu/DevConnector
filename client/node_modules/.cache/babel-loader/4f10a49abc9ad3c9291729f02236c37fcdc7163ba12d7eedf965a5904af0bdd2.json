{"ast":null,"code":"// import React from 'react';\n\n// import { knob, knobSurround, min, max, ticks } from './Profile.css';\n\n// const Profile = () =>\n//   <>\n//   <h1>Click anywhere to begin playing audio first, then drag volume knob with mouse or finger to control volume</h1>\n// <p>Current volume: <span id=\"volumeValue\">0%</span></p>\n//     <div className={'knobSurround'}>\n\n//       <div id=\"knob\" className={'knob'}></div>\n\n//       <span className={'min'}>Min</span>\n//       <span className={'max'}>Max</span>\n\n//       <div id=\"tickContainer\" className={'ticks'}></div>\n\n//     </div>   \n//   </>\n\n// export default Profile;\n\n// var knobPositionX;\n// var knobPositionY;\n// var mouseX;\n// var mouseY;\n// var knobCenterX;\n// var knobCenterY;\n// var adjacentSide;\n// var oppositeSide;\n// var currentRadiansAngle;\n// var getRadiansInDegrees;\n// var finalAngleInDegrees;\n// var volumeSetting;\n// var tickHighlightPosition;\n// var audio = new Audio(\"https://www.cineblueone.com/maskWall/audio/skylar.mp3\"); //Celine Dion's \"Ashes\"\n// var startingTickAngle = -135;\n// var tickContainer = document.getElementById(\"tickContainer\");\n// var volumeKnob = document.getElementById(\"knob\");\n// var boundingRectangle = volumeKnob.getBoundingClientRect(); //get rectangular geometric data of knob (x, y, width, height)\n\n// function main()\n// {\n//     audio.volume = 0; //start at zero volume\n\n//     volumeKnob.addEventListener(getMouseDown(), onMouseDown); //listen for mouse button click\n//     document.addEventListener(getMouseUp(), onMouseUp); //listen for mouse button release\n\n//     createTicks(27, 0);\n// }\n\n// //on mouse button down\n// // function onMouseDown()\n// // {\n// //     //start audio if not already playing\n// //     if(audio.paused == true)\n// //     {\n// //         //mobile users must tap anywhere to start audio\n// //         //https://developers.google.com/web/updates/2017/09/autoplay-policy-changes\n// //         var promise = audio.play();\n\n// //         if(promise !== undefined) \n// //         {\n// //             promise.then(function(){\n// //               audio.play();\n// //             }).catch(function(error){\n// //             });\n// //         }\n// //     }\n\n// //     document.addEventListener(getMouseMove(), onMouseMove); //start drag\n// // }\n\n// // //on mouse button release\n// // function onMouseUp()\n// // {\n// //     document.removeEventListener(getMouseMove(), onMouseMove); //stop drag\n// // }\n\n// // //compute mouse angle relative to center of volume knob\n// // //For clarification, see my basic trig explanation at:\n// // //https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15\n// // function onMouseMove(event)\n// // {\n// //     knobPositionX = boundingRectangle.left; //get knob's global x position\n// //     knobPositionY = boundingRectangle.top; //get knob's global y position\n\n// //     if(detectMobile() == \"desktop\")\n// //     {\n// //         mouseX = event.pageX; //get mouse's x global position\n// //         mouseY = event.pageY; //get mouse's y global position\n// //     } else {\n// //         mouseX = event.touches[0].pageX; //get finger's x global position\n// //         mouseY = event.touches[0].pageY; //get finger's y global position\n// //     }\n\n// //     knobCenterX = boundingRectangle.width / 2 + knobPositionX; //get global horizontal center position of knob relative to mouse position\n// //     knobCenterY = boundingRectangle.height / 2 + knobPositionY; //get global vertical center position of knob relative to mouse position\n\n// //     adjacentSide = knobCenterX - mouseX; //compute adjacent value of imaginary right angle triangle\n// //     oppositeSide = knobCenterY - mouseY; //compute opposite value of imaginary right angle triangle\n\n// //     //arc-tangent function returns circular angle in radians\n// //     //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)\n// //     currentRadiansAngle = Math.atan2(adjacentSide, oppositeSide);\n\n// //     getRadiansInDegrees = currentRadiansAngle * 180 / Math.PI; //convert radians into degrees\n\n// //     finalAngleInDegrees = -(getRadiansInDegrees - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction\n\n// //     //only allow rotate if greater than zero degrees or lesser than 270 degrees\n// //     if(finalAngleInDegrees >= 0 && finalAngleInDegrees <= 270)\n// //     {\n// //         volumeKnob.style.transform = \"rotate(\" + finalAngleInDegrees + \"deg)\"; //use dynamic CSS transform to rotate volume knob\n\n// //         //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation\n// //         volumeSetting = Math.floor(finalAngleInDegrees / (270 / 100));\n\n// //         tickHighlightPosition = Math.round((volumeSetting * 2.7) / 10); //interpolate how many ticks need to be highlighted\n\n// //         createTicks(27, tickHighlightPosition); //highlight ticks\n\n// //         audio.volume = volumeSetting / 100; //set audio volume\n\n// //         document.getElementById(\"volumeValue\").innerHTML = volumeSetting + \"%\"; //update volume text\n// //     }\n// // }\n\n// // //dynamically create volume knob \"ticks\"\n// // function createTicks(numTicks, highlightNumTicks)\n// // {\n// //     //reset first by deleting all existing ticks\n// //     while(tickContainer.firstChild)\n// //     {\n// //         tickContainer.removeChild(tickContainer.firstChild);\n// //     }\n\n// //     //create ticks\n// //     for(var i=0;i<numTicks;i++)\n// //     {\n// //         var tick = document.createElement(\"div\");\n\n// //         //highlight only the appropriate ticks using dynamic CSS\n// //         if(i < highlightNumTicks)\n// //         {\n// //             tick.className = \"tick activetick\";\n// //         } else {\n// //             tick.className = \"tick\";\n// //         }\n\n// //         tickContainer.appendChild(tick);\n// //         tick.style.transform = \"rotate(\" + startingTickAngle + \"deg)\";\n// //         startingTickAngle += 10;\n// //     }\n\n// //     startingTickAngle = -135; //reset\n// // }\n\n// // //detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/\n// // function detectMobile()\n// // {\n// //     var result = (navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i));\n\n// //     if(result !== null)\n// //     {\n// //         return \"mobile\";\n// //     } else {\n// //         return \"desktop\";\n// //     }\n// // }\n\n// // function getMouseDown()\n// // {\n// //     if(detectMobile() == \"desktop\")\n// //     {\n// //         return \"mousedown\";\n// //     } else {\n// //         return \"touchstart\";\n// //     }\n// // }\n\n// // function getMouseUp()\n// // {\n// //     if(detectMobile() == \"desktop\")\n// //     {\n// //         return \"mouseup\";\n// //     } else {\n// //         return \"touchend\";\n// //     }\n// // }\n\n// // function getMouseMove()\n// // {\n// //     if(detectMobile() == \"desktop\")\n// //     {\n// //         return \"mousemove\";\n// //     } else {\n// //         return \"touchmove\";\n// //     }\n// // }\n\n// // main();","map":{"version":3,"names":[],"sources":["/Users/sudhin.justin/source/Projects/devconnector/client/src/components/auth/Profile.js"],"sourcesContent":["// import React from 'react';\n\n// import { knob, knobSurround, min, max, ticks } from './Profile.css';\n\n// const Profile = () =>\n//   <>\n//   <h1>Click anywhere to begin playing audio first, then drag volume knob with mouse or finger to control volume</h1>\n// <p>Current volume: <span id=\"volumeValue\">0%</span></p>\n//     <div className={'knobSurround'}>\n\n//       <div id=\"knob\" className={'knob'}></div>\n\n//       <span className={'min'}>Min</span>\n//       <span className={'max'}>Max</span>\n\n//       <div id=\"tickContainer\" className={'ticks'}></div>\n\n//     </div>   \n//   </>\n\n// export default Profile;\n\n// var knobPositionX;\n// var knobPositionY;\n// var mouseX;\n// var mouseY;\n// var knobCenterX;\n// var knobCenterY;\n// var adjacentSide;\n// var oppositeSide;\n// var currentRadiansAngle;\n// var getRadiansInDegrees;\n// var finalAngleInDegrees;\n// var volumeSetting;\n// var tickHighlightPosition;\n// var audio = new Audio(\"https://www.cineblueone.com/maskWall/audio/skylar.mp3\"); //Celine Dion's \"Ashes\"\n// var startingTickAngle = -135;\n// var tickContainer = document.getElementById(\"tickContainer\");\n// var volumeKnob = document.getElementById(\"knob\");\n// var boundingRectangle = volumeKnob.getBoundingClientRect(); //get rectangular geometric data of knob (x, y, width, height)\n\n// function main()\n// {\n//     audio.volume = 0; //start at zero volume\n\n//     volumeKnob.addEventListener(getMouseDown(), onMouseDown); //listen for mouse button click\n//     document.addEventListener(getMouseUp(), onMouseUp); //listen for mouse button release\n\n//     createTicks(27, 0);\n// }\n\n// //on mouse button down\n// // function onMouseDown()\n// // {\n// //     //start audio if not already playing\n// //     if(audio.paused == true)\n// //     {\n// //         //mobile users must tap anywhere to start audio\n// //         //https://developers.google.com/web/updates/2017/09/autoplay-policy-changes\n// //         var promise = audio.play();\n      \n// //         if(promise !== undefined) \n// //         {\n// //             promise.then(function(){\n// //               audio.play();\n// //             }).catch(function(error){\n// //             });\n// //         }\n// //     }\n\n// //     document.addEventListener(getMouseMove(), onMouseMove); //start drag\n// // }\n\n// // //on mouse button release\n// // function onMouseUp()\n// // {\n// //     document.removeEventListener(getMouseMove(), onMouseMove); //stop drag\n// // }\n\n// // //compute mouse angle relative to center of volume knob\n// // //For clarification, see my basic trig explanation at:\n// // //https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15\n// // function onMouseMove(event)\n// // {\n// //     knobPositionX = boundingRectangle.left; //get knob's global x position\n// //     knobPositionY = boundingRectangle.top; //get knob's global y position\n\n// //     if(detectMobile() == \"desktop\")\n// //     {\n// //         mouseX = event.pageX; //get mouse's x global position\n// //         mouseY = event.pageY; //get mouse's y global position\n// //     } else {\n// //         mouseX = event.touches[0].pageX; //get finger's x global position\n// //         mouseY = event.touches[0].pageY; //get finger's y global position\n// //     }\n\n// //     knobCenterX = boundingRectangle.width / 2 + knobPositionX; //get global horizontal center position of knob relative to mouse position\n// //     knobCenterY = boundingRectangle.height / 2 + knobPositionY; //get global vertical center position of knob relative to mouse position\n\n// //     adjacentSide = knobCenterX - mouseX; //compute adjacent value of imaginary right angle triangle\n// //     oppositeSide = knobCenterY - mouseY; //compute opposite value of imaginary right angle triangle\n\n// //     //arc-tangent function returns circular angle in radians\n// //     //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)\n// //     currentRadiansAngle = Math.atan2(adjacentSide, oppositeSide);\n\n// //     getRadiansInDegrees = currentRadiansAngle * 180 / Math.PI; //convert radians into degrees\n\n// //     finalAngleInDegrees = -(getRadiansInDegrees - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction\n\n// //     //only allow rotate if greater than zero degrees or lesser than 270 degrees\n// //     if(finalAngleInDegrees >= 0 && finalAngleInDegrees <= 270)\n// //     {\n// //         volumeKnob.style.transform = \"rotate(\" + finalAngleInDegrees + \"deg)\"; //use dynamic CSS transform to rotate volume knob\n\n// //         //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation\n// //         volumeSetting = Math.floor(finalAngleInDegrees / (270 / 100));\n\n// //         tickHighlightPosition = Math.round((volumeSetting * 2.7) / 10); //interpolate how many ticks need to be highlighted\n\n// //         createTicks(27, tickHighlightPosition); //highlight ticks\n\n// //         audio.volume = volumeSetting / 100; //set audio volume\n\n// //         document.getElementById(\"volumeValue\").innerHTML = volumeSetting + \"%\"; //update volume text\n// //     }\n// // }\n\n// // //dynamically create volume knob \"ticks\"\n// // function createTicks(numTicks, highlightNumTicks)\n// // {\n// //     //reset first by deleting all existing ticks\n// //     while(tickContainer.firstChild)\n// //     {\n// //         tickContainer.removeChild(tickContainer.firstChild);\n// //     }\n\n// //     //create ticks\n// //     for(var i=0;i<numTicks;i++)\n// //     {\n// //         var tick = document.createElement(\"div\");\n\n// //         //highlight only the appropriate ticks using dynamic CSS\n// //         if(i < highlightNumTicks)\n// //         {\n// //             tick.className = \"tick activetick\";\n// //         } else {\n// //             tick.className = \"tick\";\n// //         }\n\n// //         tickContainer.appendChild(tick);\n// //         tick.style.transform = \"rotate(\" + startingTickAngle + \"deg)\";\n// //         startingTickAngle += 10;\n// //     }\n\n// //     startingTickAngle = -135; //reset\n// // }\n\n// // //detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/\n// // function detectMobile()\n// // {\n// //     var result = (navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i));\n\n// //     if(result !== null)\n// //     {\n// //         return \"mobile\";\n// //     } else {\n// //         return \"desktop\";\n// //     }\n// // }\n\n// // function getMouseDown()\n// // {\n// //     if(detectMobile() == \"desktop\")\n// //     {\n// //         return \"mousedown\";\n// //     } else {\n// //         return \"touchstart\";\n// //     }\n// // }\n\n// // function getMouseUp()\n// // {\n// //     if(detectMobile() == \"desktop\")\n// //     {\n// //         return \"mouseup\";\n// //     } else {\n// //         return \"touchend\";\n// //     }\n// // }\n\n// // function getMouseMove()\n// // {\n// //     if(detectMobile() == \"desktop\")\n// //     {\n// //         return \"mousemove\";\n// //     } else {\n// //         return \"touchmove\";\n// //     }\n// // }\n\n// // main();"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}